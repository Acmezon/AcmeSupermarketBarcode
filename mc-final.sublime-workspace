{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ang",
				"angle	forstmt"
			],
			[
				"an",
				"angle	forstmt"
			],
			[
				"col",
				"colIdx	forstmt"
			],
			[
				"row",
				"rowIdx	forstmt"
			],
			[
				"max",
				"max_theta	param"
			],
			[
				"min",
				"min_theta	param"
			],
			[
				"hdf",
				"hdf5_matrix	statement"
			],
			[
				"user",
				"users_count	statement"
			],
			[
				"movi",
				"movies_count	statement"
			],
			[
				"UInt",
				"UInt64Atom	statement"
			],
			[
				"conn",
				"connection	statement"
			],
			[
				"sampl",
				"sample_clusters"
			],
			[
				"connec",
				"connection"
			],
			[
				"prod",
				"product_similarities	statement"
			],
			[
				"sim",
				"similarity	statement"
			],
			[
				"pro",
				"product2_id	statement"
			],
			[
				"simi",
				"similarities"
			],
			[
				"pr",
				"product1	forstmt"
			],
			[
				"p1",
				"p1_denominator	statement"
			],
			[
				"te",
				"term_2	statement"
			],
			[
				"p2",
				"p2_denominator	statement"
			],
			[
				"ter",
				"term_1	statement"
			],
			[
				"p1_",
				"p1_denominator	statement"
			],
			[
				"us",
				"user_rating_avg	statement"
			],
			[
				"in",
				"index	forstmt"
			],
			[
				"p2_",
				"p2_ratings	statement"
			],
			[
				"inter",
				"intersect1d	function"
			],
			[
				"ra",
				"ratings_matrix	param"
			],
			[
				"sum",
				"sum_values"
			],
			[
				"alp",
				"alphas"
			],
			[
				"is",
				"is_adjacent"
			],
			[
				"state",
				"state2"
			],
			[
				"st",
				"state2"
			],
			[
				"a",
				"a_matrix"
			],
			[
				"sta",
				"state1"
			],
			[
				"valid",
				"valid_states"
			],
			[
				"a_",
				"a_i_j"
			],
			[
				"get",
				"get_a_matrix"
			],
			[
				"forward",
				"forward_error"
			],
			[
				"ob",
				"observations"
			],
			[
				"STAR",
				"starting_point"
			],
			[
				"pi",
				"pi_vector"
			],
			[
				"vali",
				"valid_states"
			],
			[
				"path",
				"path_enlarged"
			],
			[
				"bes",
				"best_path_enlarged"
			],
			[
				"image",
				"image_paths"
			],
			[
				"image_po",
				"image_points"
			],
			[
				"pat",
				"path_enlarged"
			],
			[
				"e",
				"enlarge_factor"
			],
			[
				"final",
				"final_state_j"
			],
			[
				"fina",
				"final_state_j"
			],
			[
				"fia",
				"final_state_i"
			],
			[
				"ima",
				"image"
			],
			[
				"imag",
				"image_i"
			],
			[
				"imga",
				"image_i"
			],
			[
				"map",
				"map_"
			],
			[
				"map_",
				"map_image"
			],
			[
				"fo",
				"forward_errors"
			],
			[
				"pa",
				"path_error"
			],
			[
				"for",
				"forward_error"
			],
			[
				"tran",
				"translated_estimated_path"
			],
			[
				"tra",
				"translated_estimated_path"
			],
			[
				"est",
				"estimated_path"
			],
			[
				"es",
				"estimated_path"
			],
			[
				"viter",
				"viterbi_recursive"
			],
			[
				"val",
				"valid_states"
			],
			[
				"pos",
				"positions"
			],
			[
				"obser",
				"observations"
			],
			[
				"get_",
				"get_b_matrix"
			],
			[
				"conne",
				"connected"
			],
			[
				"de",
				"denoised"
			],
			[
				"ne",
				"n_neighbour"
			],
			[
				"nei",
				"neighbour_labels"
			],
			[
				"connecte",
				"connected_components"
			],
			[
				"neig",
				"neighbour_foreground"
			],
			[
				"neu",
				"neighbour_values"
			],
			[
				"move",
				"movement"
			],
			[
				"obse",
				"observation"
			],
			[
				"obs",
				"obs_movements"
			],
			[
				"genera",
				"generate_sample"
			],
			[
				"star",
				"start_coord"
			],
			[
				"fac",
				"factors"
			],
			[
				"ap",
				"alphas"
			],
			[
				"ro",
				"row"
			],
			[
				"co",
				"column_2"
			],
			[
				"s",
				"shape"
			],
			[
				"poss",
				"possibilities"
			],
			[
				"slef",
				"self"
			],
			[
				"generate",
				"generate_map"
			],
			[
				"num",
				"num_salt"
			],
			[
				"colu",
				"columnspan"
			],
			[
				"sig",
				"sigma_y"
			],
			[
				"ks",
				"k_size"
			],
			[
				"save",
				"savefile"
			],
			[
				"func",
				"function"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 644,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/adminuser/Downloads/bars3d_demo.py",
			"settings":
			{
				"buffer_size": 581,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/adminuser/Downloads/hough_tf.py",
			"settings":
			{
				"buffer_size": 708,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\nHere image is an input raster;\nstep is it's step; size characterizes it's ROI;\nrho and theta are discretization steps (in pixels and radians correspondingly).\nthreshold is the minimum number of pixels in the feature for it\nto be a candidate for line. lines is the output\narray of (rho, theta) pairs. linesMax is the buffer size (number of pairs).\nFunctions return the actual number of found lines.\n*/\nstatic void\nHoughLinesStandard( const Mat& img, float rho, float theta,\n                    int threshold, std::vector<Vec2f>& lines, int linesMax,\n                    double min_theta, double max_theta )\n{\n    int i, j;\n    float irho = 1 / rho;\n\n    CV_Assert( img.type() == CV_8UC1 );\n\n    const uchar* image = img.ptr();\n    int step = (int)img.step;\n    int width = img.cols;\n    int height = img.rows;\n\n    if (max_theta < min_theta ) {\n        CV_Error( CV_StsBadArg, \"max_theta must be greater than min_theta\" );\n    }\n    int numangle = cvRound((max_theta - min_theta) / theta);\n    int numrho = cvRound(((width + height) * 2 + 1) / rho);\n\n#if defined HAVE_IPP && !defined(HAVE_IPP_ICV_ONLY) && IPP_VERSION_X100 >= 810 && IPP_DISABLE_BLOCK\n    CV_IPP_CHECK()\n    {\n        IppiSize srcSize = { width, height };\n        IppPointPolar delta = { rho, theta };\n        IppPointPolar dstRoi[2] = {{(Ipp32f) -(width + height), (Ipp32f) min_theta},{(Ipp32f) (width + height), (Ipp32f) max_theta}};\n        int bufferSize;\n        int nz = countNonZero(img);\n        int ipp_linesMax = std::min(linesMax, nz*numangle/threshold);\n        int linesCount = 0;\n        lines.resize(ipp_linesMax);\n        IppStatus ok = ippiHoughLineGetSize_8u_C1R(srcSize, delta, ipp_linesMax, &bufferSize);\n        Ipp8u* buffer = ippsMalloc_8u(bufferSize);\n        if (ok >= 0) ok = ippiHoughLine_Region_8u32f_C1R(image, step, srcSize, (IppPointPolar*) &lines[0], dstRoi, ipp_linesMax, &linesCount, delta, threshold, buffer);\n        ippsFree(buffer);\n        if (ok >= 0)\n        {\n            lines.resize(linesCount);\n            CV_IMPL_ADD(CV_IMPL_IPP);\n            return;\n        }\n        lines.clear();\n        setIppErrorStatus();\n    }\n#endif\n\n    AutoBuffer<int> _accum((numangle+2) * (numrho+2));\n    std::vector<int> _sort_buf;\n    AutoBuffer<float> _tabSin(numangle);\n    AutoBuffer<float> _tabCos(numangle);\n    int *accum = _accum;\n    float *tabSin = _tabSin, *tabCos = _tabCos;\n\n    memset( accum, 0, sizeof(accum[0]) * (numangle+2) * (numrho+2) );\n\n    float ang = static_cast<float>(min_theta);\n    for(int n = 0; n < numangle; ang += theta, n++ )\n    {\n        tabSin[n] = (float)(sin((double)ang) * irho);\n        tabCos[n] = (float)(cos((double)ang) * irho);\n    }\n\n    // stage 1. fill accumulator\n    for( i = 0; i < height; i++ )\n        for( j = 0; j < width; j++ )\n        {\n            if( image[i * step + j] != 0 )\n                for(int n = 0; n < numangle; n++ )\n                {\n                    int r = cvRound( j * tabCos[n] + i * tabSin[n] );\n                    r += (numrho - 1) / 2;\n                    accum[(n+1) * (numrho+2) + r+1]++;\n                }\n        }\n\n    // stage 2. find local maximums\n    for(int r = 0; r < numrho; r++ )\n        for(int n = 0; n < numangle; n++ )\n        {\n            int base = (n+1) * (numrho+2) + r+1;\n            if( accum[base] > threshold &&\n                accum[base] > accum[base - 1] && accum[base] >= accum[base + 1] &&\n                accum[base] > accum[base - numrho - 2] && accum[base] >= accum[base + numrho + 2] )\n                _sort_buf.push_back(base);\n        }\n\n    // stage 3. sort the detected lines by accumulator value\n    std::sort(_sort_buf.begin(), _sort_buf.end(), hough_cmp_gt(accum));\n\n    // stage 4. store the first min(total,linesMax) lines to the output buffer\n    linesMax = std::min(linesMax, (int)_sort_buf.size());\n    double scale = 1./(numrho+2);\n    for( i = 0; i < linesMax; i++ )\n    {\n        LinePolar line;\n        int idx = _sort_buf[i];\n        int n = cvFloor(idx*scale) - 1;\n        int r = idx - (n+1)*(numrho+2) - 1;\n        line.rho = (r - (numrho - 1)*0.5f) * rho;\n        line.angle = static_cast<float>(min_theta) + n * theta;\n        lines.push_back(Vec2f(line.rho, line.angle));\n    }\n}",
			"settings":
			{
				"buffer_size": 4217,
				"line_ending": "Unix",
				"name": "/*"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 180.0,
		"last_filter": "enable",
		"selected_items":
		[
			[
				"enable",
				"Anaconda: Enable linting on this file"
			],
			[
				"disable",
				"Anaconda: Disable linting on this file"
			],
			[
				"",
				"Anaconda: Disable linting on this file"
			],
			[
				"d",
				"Anaconda: Disable linting on this file"
			],
			[
				"err",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"V",
				"Virtualenv: Activate"
			],
			[
				"vir",
				"Virtualenv: Activate"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/adminuser/Documents/MC-Final",
		"/home/adminuser/Documents/MC-Final/resources"
	],
	"file_history":
	[
		"/home/adminuser/Documents/MC-Final/mc-final.sublime-project",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/files",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/db/db_connection.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/acme-supermarket-recommender-aia.sublime-project",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/rules/extraction.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/rules/apriori.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/rules/apriori_enhanced.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/filter/users.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/preprocessing/acme-supermarket.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/preprocessing/movielens.py",
		"/home/adminuser/Documents/AcmeSupermarketRecommenderAIA/preprocessing/retails.py",
		"/home/adminuser/Downloads/Telegram Desktop/recommendations.py",
		"/home/adminuser/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/adminuser/Documents/markov-aia/generation.py",
		"/home/adminuser/Documents/markov-aia/main.py",
		"/home/adminuser/Documents/markov-aia/test.py",
		"/home/adminuser/Documents/markov-aia/Model.py",
		"/home/adminuser/Documents/markov-aia/Map.py",
		"/home/adminuser/Documents/markov-aia/functions.py",
		"/home/adminuser/Documents/markov-aia/map_paths.jpg",
		"/home/adminuser/Documents/markov-aia/map.txt",
		"/home/adminuser/Documents/markov-aia/image.txt",
		"/home/adminuser/Documents/MC-Deliverable-2/connected_components.txt",
		"/home/adminuser/Documents/markov-aia/forward.py",
		"/home/adminuser/Documents/markov-aia/viterbi.py",
		"/home/adminuser/Documents/markov-aia/model.py",
		"/home/adminuser/Documents/MC-Deliverable-1/resources/testing/lenna-gauss.jpg",
		"/home/adminuser/Documents/MC-Deliverable-1/functions.py",
		"/home/adminuser/Downloads/ttk/pyttk-0.3.2/README"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"angles",
			"out",
			"H",
			"nC",
			"nR",
			"= 1",
			"\\\"",
			"img_bin",
			"N",
			"asr-aia",
			"\\\"",
			"hdf5_file",
			"hdf5_path",
			"cnx",
			"20",
			"60",
			"100",
			"20",
			"range(",
			"keys",
			"] = 1.0",
			"[0] = 1.0",
			"get_transitions_rate",
			"15",
			"i-1",
			"-1",
			"[i]",
			"i",
			"i-1",
			"5",
			"100",
			"5",
			"best_path_enlarged",
			"image",
			"Image",
			"image",
			"Image",
			"image",
			"image = Image.fromarray(image)\n		image.save('map.jpg')",
			"points",
			"image",
			"value",
			"(image_i, image_j) in path_enlarged",
			"path",
			"image_j",
			"D",
			"\n	image.save('map.jpg')",
			"3",
			":",
			"0",
			":",
			"e",
			"0000000000000000",
			"00000000000000000",
			"0000000000000000",
			"000000000000000000",
			"00000000000000000",
			"0000000000000000",
			"000000000000000000",
			"00000000000000000",
			"0000000000000000",
			"map",
			"20",
			"3",
			"log10",
			"forward_error",
			"[i]",
			"i",
			"get_observation_rate",
			"get_transitions_rate",
			"get_direction",
			"pointers",
			"alphas",
			"get_observation_rate",
			"state1",
			"shape",
			", b",
			", ",
			"5",
			"3",
			"7",
			"processed_img = Image.fromarray(processed_img)",
			"gray",
			"7",
			"9",
			"denoised",
			"gray",
			"img",
			"	",
			"print",
			"1",
			"in columns",
			"rows",
			"image.shape",
			"print",
			"functions",
			"get_observation_rate",
			"map_matrix",
			"obs",
			"res",
			"if",
			"size",
			"++;",
			"&&",
			"1",
			"0",
			"1",
			"map_matrix.get_map().shape",
			"is_obstacle",
			" ",
			"a_matrix",
			"a_matrix, b_matrix, pi_vector, observations",
			"_a_",
			"b",
			"obstacle_rate",
			"self",
			"\n ",
			"map",
			"imGray",
			"cv::",
			"out",
			"image",
			"Image",
			"image",
			"  ",
			"image",
			"  ",
			"sigma_y"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"accum",
			"np"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 644,
						"regions":
						{
						},
						"selection":
						[
							[
								341,
								341
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/adminuser/Downloads/bars3d_demo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 581,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/adminuser/Downloads/hough_tf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 708,
						"regions":
						{
						},
						"selection":
						[
							[
								305,
								305
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4217,
						"regions":
						{
						},
						"selection":
						[
							[
								1006,
								1006
							]
						],
						"settings":
						{
							"auto_name": "/*",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 266.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "mc-final.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 180.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
